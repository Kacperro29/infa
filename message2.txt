#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

// Funkcja do wyszukiwania min i max
void findMinMax(const std::vector<int>& data, int& min, int& max) {
    min = *std::min_element(data.begin(), data.end());
    max = *std::max_element(data.begin(), data.end());
}

// Funkcja sortowania przez scalanie
void mergeSort(std::vector<int>& data) {
    if (data.size() <= 1) {
        return;
    }
    
    int mid = data.size() / 2;
    std::vector<int> left(data.begin(), data.begin() + mid);
    std::vector<int> right(data.begin() + mid, data.end());
    
    mergeSort(left);
    mergeSort(right);
    
    std::merge(left.begin(), left.end(), right.begin(), right.end(), data.begin());
}

// Funkcja sortowania szybkiego
void quickSort(std::vector<int>& data, int low, int high) {
    if (low >= high) {
        return;
    }
    
    int pivot = data[high];
    int i = low - 1;
    
    for (int j = low; j < high; j++) {
        if (data[j] <= pivot) {
            i++;
            std::swap(data[i], data[j]);
        }
    }
    
    std::swap(data[i + 1], data[high]);
    
    int pivotIndex = i + 1;
    
    quickSort(data, low, pivotIndex - 1);
    quickSort(data, pivotIndex + 1, high);
}

int main() {
    std::ifstream inputFile("input.txt");
    std::ofstream outputFile("output.txt");
    
    std::vector<int> data;
    int value;
    
    // Wczytywanie danych z pliku
    while (inputFile >> value) {
        data.push_back(value);
    }
    
    // Wyszukiwanie min i max
    int min, max;
    findMinMax(data, min, max);
    
    // Sortowanie przez scalanie
    mergeSort(data);
    
    // Zapisywanie posortowanych danych do pliku
    for (const auto& num : data) {
        outputFile << num << " ";
    }
    
    // Sortowanie szybkie
    quickSort(data, 0, data.size() - 1);
    
    // Zamykanie plikÃ³w
    inputFile.close();
    outputFile.close();
    
    return 0;
}